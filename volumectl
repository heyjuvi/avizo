#!/bin/sh

if [ "z$VOLUME_DEBUG" != "z" ]; then
    set -x
fi
function _current() {
  CURRENT=$(pamixer --get-volume --sink $SELECTED_SINK_N)
}
function _is_muted() {

  OUT_MUTED=$(if $(pamixer --get-mute --sink $SELECTED_SINK_N) == false; then echo yes; else echo no; fi)

  IN_MUTED=$(pactl list sources|\
    grep '^[[:space:]]\(Mute\|Name\)'|\
    grep $DEF_SOURCE -A 1|\
    grep Mute|\
    awk -F": " '{print $2}')
}

AMOUNT="5%"
TIME=1
DEFAULT_SINK=$(pactl info | grep "Default Sink: "| awk -F": " '{print $2}')
RUNNING_SINK=$(pactl list short sinks | grep RUNNING | cut -f 2 | head -n 1)
SELECTED_SINK=${RUNNING_SINK:-$DEFAULT_SINK}
SELECTED_SINK_N=$(pactl list short sinks | grep $SELECTED_SINK | cut -f1)
DEF_SOURCE=$(pactl info | grep "Default Source: "| awk -F": " '{print $2}')

function _maybe_unmute() {
  _is_muted
  if [[ "$OUT_MUTED" = "yes" ]]; then
    pactl set-sink-mute $SELECTED_SINK false
  fi
}

function _raise() {
  _maybe_unmute
  _current
  if [ ${CURRENT} -lt 100 ]; then
      pactl set-sink-volume $SELECTED_SINK "+${AMOUNT}"
  fi
}

function _lower() {
  _maybe_unmute
  pactl set-sink-volume $SELECTED_SINK "-${AMOUNT}"
}

function _toggle_out_mute() {
  pactl set-sink-mute $SELECTED_SINK toggle
}

function _toggle_in_mute() {
  for SOURCE in $(pactl list short sources | grep -v monitor | cut -f1)
  do
    pactl set-source-mute $SOURCE toggle
  done
}

function _notify() {
  local alpha="0.5"

  _is_muted
  _current
  if [[ "$1" == "out-mute" && "$OUT_MUTED" == "yes" ]]
  then
      avizo-client --image-resource="volume_muted" --progress="0" --time=$TIME --background="rgba(255, 255, 255, $alpha)"
  elif [[ "$1" == "in-mute" && "$IN_MUTED" == "yes" ]]
  then
      avizo-client --image-resource="mic_muted" --time=$TIME --background="rgba(255, 255, 255, $alpha)"
  elif [[ "$1" == "in-mute" && "$IN_MUTED" == "no" ]]
  then
      avizo-client --image-resource="mic_unmuted" --time=$TIME --background="rgba(255, 255, 255, $alpha)"
  else
      local scaled=$(echo "scale=2; $CURRENT / 100.0" | bc)

      if [ "$CURRENT" -lt "34" ]
      then
          avizo-client --image-resource="volume_low" --progress=$scaled --time=$TIME --background="rgba(255, 255, 255, $alpha)"
      elif [ "$CURRENT" -lt "67" ]
      then
          avizo-client --image-resource="volume_medium" --progress=$scaled --time=$TIME --background="rgba(255, 255, 255, $alpha)"
      elif [ "$CURRENT" -lt "101" ]
      then
          avizo-client --image-resource="volume_high" --progress=$scaled --time=$TIME --background="rgba(255, 255, 255, $alpha)"
      fi
  fi
}

function raise() {
  _raise
  _notify
}

function lower() {
  _lower
  _notify
}

function toggle_out_mute() {
  _toggle_out_mute
  _notify out-mute
}

function toggle_in_mute() {
  _toggle_in_mute
  _notify in-mute
}

function help() {
  cat <<EOH
$0 [COMMAND]
Control the volume of the running sink and displays the current outcome.
May also mute/unmute all the microphone inputs.

COMMAND:
    raise|+    --  raises the volume
    lower|-  --  lowers the volume
    mute|m  --  toggles the mute state
                (defaults to output, use --mic to specify to mute the mic)
EOH
}

case $1 in
  raise|+)
    raise
    exit 0
    ;;
  lower|-)
    lower
    exit 0
    ;;
  mute|m)
    shift
    case $1 in
      --mic)
        toggle_in_mute
        exit 0
        ;;
      *)
        toggle_out_mute
        exit 0
        ;;
    esac
    ;;
  help|-h|--help)
    help
    exit 0
    ;;
  *)
    help
    exit 1
    ;;
esac

# vim:set et ts=2 sts=0 sw=0:
